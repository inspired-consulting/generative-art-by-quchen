{-# LANGUAGE OverloadedStrings #-}

module Main (main) where



import           Control.Exception
import           Data.List
import qualified Data.Text         as T
import qualified Data.Text.IO      as T
import           Data.Traversable
import           System.Directory
import           System.FilePath
import           System.IO

import qualified Test.Bezier
import qualified Test.Billard
import qualified Test.ConvexHull
import qualified Test.Cut
import qualified Test.Delaunay
import qualified Test.DifferentialEquation
import qualified Test.IntersectionLL
import qualified Test.Mirror
import qualified Test.Penrose
import qualified Test.Properties
import qualified Test.RandomCut
import qualified Test.Reflection
import qualified Test.Sampling
import qualified Test.SimpleOperations
import qualified Test.Trajectory
import qualified Test.Triangulate
import qualified Test.Voronoi

import Test.Tasty



main :: IO ()
main = finally (defaultMain (defaultOptions tests))
               runPostTestScripts

defaultOptions :: TestTree -> TestTree
defaultOptions = foldr (.) id
    [ localOption (Timeout 1000000 "1s") ]

tests :: TestTree
tests = testGroup "Test suite"
    [ Test.Properties.tests
    , testGroup "Visual tests"
        [ Test.Bezier.tests
        , Test.Billard.tests
        , Test.ConvexHull.tests
        , Test.Cut.tests
        , Test.DifferentialEquation.tests
        , Test.IntersectionLL.tests
        , Test.Mirror.tests
        , Test.Penrose.tests
        , Test.RandomCut.tests
        , Test.Reflection.tests
        , Test.Sampling.tests
        , Test.SimpleOperations.tests
        , Test.Trajectory.tests
        , Test.Triangulate.tests
        , Test.Delaunay.tests
        , Test.Voronoi.tests
        ]
    ]

runPostTestScripts :: IO ()
runPostTestScripts = generateVisualTestsuite

data FileType = RegularFile | Directory | Other | NotFound
    deriving (Eq, Ord, Show)

fileType :: FilePath -> IO FileType
fileType path = ifM
    [ (doesFileExist path,      RegularFile)
    , (doesDirectoryExist path, Directory)
    , (doesPathExist path,      Other)
    , (pure otherwise,          NotFound)
    ]

ifM :: Monad m => [(m Bool, a)] -> m a
ifM [] = error "ifM: non-exhaustive list of conditions"
ifM ((conditionM, result):xs) = conditionM >>= \case
    True -> pure result
    False -> ifM xs

-- | List the immediate contents of a directory. Unsafe because it throws an
-- exception if the input is not a directory.
unsafeListDir :: FilePath -> IO [FilePath]
unsafeListDir dir = do
    filesInDir <- do
        basenames <- listDirectory dir
        pure [dir </> basename | basename <- sort basenames]
    pure filesInDir

listAllFiles :: FilePath -> IO [FilePath]
listAllFiles file = fileType file >>= \case
    RegularFile -> pure [file]
    Directory -> do
        contained <- unsafeListDir file
        recursed <- for contained listAllFiles
        pure (concat recursed)
    Other -> pure []
    NotFound -> pure []

generateVisualTestsuite :: IO ()
generateVisualTestsuite = do
    svgs <- do
        paths <- listAllFiles "docs"
        pure (filter (\path -> takeExtension path == ".svg") paths)
    generateMarkdown "test/out/README.md" svgs
    generateHtml "test/out/README.html" svgs

generateMarkdown :: FilePath -> [FilePath] -> IO ()
generateMarkdown md svgFiles = do
    T.putStrLn "Generating visual testsuite file (Markdown for Github)"
    let content = T.unlines
            [ "<!-- This file was auto-generated by generate_readme.sh -->"
            , ""
            , "# Visual testsuite"
            , ""
            , "This file contains the SVG files generated by the visual testsuite to glance"
            , "over quickly."
            , ""
            ] <> T.unlines [T.pack ("![Missing image!](../../" ++ svg ++ ")") | svg <- svgFiles]
    withFile md WriteMode $ \h -> T.hPutStr h content

generateHtml :: FilePath -> [FilePath] -> IO ()
generateHtml html svgFiles = do
    T.putStrLn "Generating visual testsuite file (Markdown for Github)"
    let content = T.unlines (
            [ "<!DOCTYPE html>"
            , "<!-- This file was auto-generated by generate_readme.sh -->"
            , "<html lang=\"en\">"
            , "    <head>"
            , "        <meta charset=\"utf-8\">"
            , "        <title>Generative Art – Visual Testsuite</title>"
            , "    </head>"
            , "    <body>"
            , "        <h1>Generative Art – Visual Testsuite</h1>"
            , "        <p>This file contains the SVG files generated by the visual testsuite to glance over quickly.</p>"
            ]
            <>
            [T.pack ("        <div><img src=\"../../" ++ svg ++ "\" alt=\"Missing image!\"/></div>") | svg <- svgFiles]
            <>
            [ "    </body>"
            , "</html>"
            ]
            )
    withFile html WriteMode $ \h -> T.hPutStr h content
