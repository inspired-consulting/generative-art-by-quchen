{-# LANGUAGE OverloadedStrings #-}

module VisualOutput.TestsuiteGenerator (
      generateMarkdown
    , generateHtml
) where

import qualified Data.Text    as T
import qualified Data.Text.IO as T
import           System.IO

generateMarkdown :: FilePath -> [FilePath] -> IO ()
generateMarkdown md files = do
    let content = T.unlines
            [ "<!-- This file was auto-generated by generate_readme.sh -->"
            , ""
            , "# Visual testsuite"
            , ""
            , "This file contains the example files generated by the visual testsuite to glance"
            , "over quickly."
            , ""
            ] <> T.intercalate "\n\n" [T.pack ("![Missing image!](../../" ++ file ++ ")") | file <- files]
    withFile md WriteMode $ \h -> T.hPutStr h content

generateHtml :: FilePath -> [FilePath] -> IO ()
generateHtml html files = do
    let content = T.unlines (
            [ "<!DOCTYPE html>"
            , "<!-- This file was auto-generated by generate_readme.sh -->"
            , "<html lang=\"en\">"
            , "    <head>"
            , "        <meta charset=\"utf-8\">"
            , "        <title>Generative Art – Visual Testsuite</title>"
            , "    </head>"
            , "    <body>"
            , "        <h1>Generative Art – Visual Testsuite</h1>"
            , "        <p>This file contains the example files generated by the visual testsuite to glance over quickly.</p>"
            ]
            <>
            [T.pack ("        <div><img src=\"../../" ++ file ++ "\" alt=\"Missing image!\"/></div>") | file <- files]
            <>
            [ "    </body>"
            , "</html>"
            ]
            )
    withFile html WriteMode $ \h -> T.hPutStr h content
